{
	// Place your MyPractices ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }


	"ABC first template": {
		"scope": "cpp",
		"prefix": "abc",
		"body": [
			"// ABC",
			"",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#define ALL(a) (a).begin(), (a).end()",
			"// constexpr int INF = 1009876543;",
			"// constexpr long LINF = 2211009988776543210LL;",
			"// constexpr int MOD = 998244353;",
			"",
			"int main(){",
			"",
			"  // input",
			"  int n, m;",
			"  cin >> n >> m;",
			"",
			"  // solve",
			"  int ans;",
			"",
			"  // output",
			"  cout << ans << endl;",
			"  return 0;",
			"",
			"}"
		],
		"description": "AtCoder"
	},
	"rep macro": {
		"scope": "cpp",
		"prefix": "rep",
		"body": [
			"#define rep(i, n) for (int i = 0; i < (int)(n); i++)",
		],
		"description": "AtCoder"
	},
	"debug": {
		"scope": "cpp",
		"prefix": "ddd",
		"body": [
			"// for debug",
			"#define COUT(a) cout << a << endl",
			"#define VIEW(x) do{cout << \"--\" << #x << \"--\" << endl; view(x);}while(0)",
			"template<typename T> void view(T e){COUT(e);}",
			"template<typename T> void view(const vector<T>& v){for(const auto& e : v){ cout << e << \" \"; } cout << endl;}",
			"template<typename T> void view(const vector<vector<T> >& vv){ for(const auto& v : vv){ view(v); } }"
		],
		"description": "AtCoder"
	},
	"input vector": {
		"scope": "cpp",
		"prefix": "vect",
		"body": [
			"vector<int> A(n);",
			"for (auto &a : A) cin >> a;"
		],
		"description": "AtCoder"
	}

}